name: Backend Image Creation

on:
  pull_request:
    branches: ["main"]
    paths:
      - "PersonifiBackend/**"
      - ".github/workflows/**"
  push:
    branches: ["main"]
    paths:
      - "PersonifiBackend/**"
      - ".github/workflows/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: craigbanach/personifibackend
  DOTNET_VERSION: "9.0.x"

jobs:
  # Test job runs on both PRs and pushes
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./PersonifiBackend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: |
          dotnet test \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults \
            --collect:"XPlat Code Coverage"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: PersonifiBackend/TestResults/
          retention-days: 7

      - name: Upload code coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-coverage
          path: PersonifiBackend/TestResults/*/coverage.cobertura.xml
          retention-days: 7

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # # For main branch - latest + commit sha
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,format=short,enable={{is_default_branch}}

            # For releases
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # Always add latest for main branch
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=PersonifiBackend
            org.opencontainers.image.description=Personal Finance Backend API
            org.opencontainers.image.vendor=Craig Banach
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:PersonifiBackend"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  comment-pr:
    name: Comment Test Results on PR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: TestResults/

      - name: Comment PR with test results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find TRX files
            const testResultsDir = 'TestResults';
            let testSummary = '## Test Results üß™\n\n';

            try {
              const files = fs.readdirSync(testResultsDir, { recursive: true });
              const trxFiles = files.filter(file => file.toString().endsWith('.trx'));
              
              if (trxFiles.length > 0) {
                testSummary += '‚úÖ Tests completed successfully!\n\n';
                testSummary += `Found ${trxFiles.length} test result file(s).\n`;
              } else {
                testSummary += '‚ùå No test results found.\n';
              }
            } catch (error) {
              testSummary += '‚ùå Error reading test results.\n';
            }

            testSummary += '\n---\n';
            testSummary += '*This comment was automatically generated by the CI/CD pipeline.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

  deploy-staging:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to Koyeb
        env:
          KOYEB_SERVICE_ID: ${{ vars.KOYEB_SERVICE_ID }}
        run: |
          curl -X POST "https://app.koyeb.com/v1/services/${{env.KOYEB_SERVICE_ID}}/redeploy" \
            -H "Authorization: Bearer ${{secrets.KOYEB_REDEPLOY_KEY}}" \
            -H "Content-Type: application/json" \
            -d '{}'
