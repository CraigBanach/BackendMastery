name: Backend Image Creation

on:
  pull_request:
    branches: ["main"]
    paths:
      - "PersonifiBackend/**"
      - ".github/workflows/**"
  push:
    branches: ["main"]
    paths:
      - "PersonifiBackend/**"
      - ".github/workflows/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: craigbanach/personifibackend
  DOTNET_VERSION: "9.0.x"

jobs:
  # Unit tests job - runs fast tests with mocks
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./PersonifiBackend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: |
          dotnet test \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults/Unit \
            --collect:"XPlat Code Coverage" \
            --filter "Category=Unit"

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: PersonifiBackend/TestResults/Unit/
          retention-days: 7

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: PersonifiBackend/TestResults/Unit/*/coverage.cobertura.xml
          retention-days: 7

  # Integration tests job - runs slower tests with database
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./PersonifiBackend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run integration tests
        run: |
          dotnet test \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults/Integration \
            --collect:"XPlat Code Coverage" \
            --filter "Category=Integration"

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: PersonifiBackend/TestResults/Integration/
          retention-days: 7

      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-coverage
          path: PersonifiBackend/TestResults/Integration/*/coverage.cobertura.xml
          retention-days: 7

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      backend-tags: ${{ steps.meta.outputs.tags }}

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # # For main branch - latest + commit sha
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,format=short,enable={{is_default_branch}}

            # For releases
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # Always add latest for main branch
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=PersonifiBackend
            org.opencontainers.image.description=Personal Finance Backend API
            org.opencontainers.image.vendor=Craig Banach
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:PersonifiBackend"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  update-deployment-config:
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write

    steps:
      - name: Update GitOps deployment configuration
        run: |
          # Clone deployment repository
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/personifi-deployments.git
          cd personifi-deployments
          
          # Get current frontend image from deployment.env
          CURRENT_FRONTEND_IMAGE=$(grep "FRONTEND_IMAGE=" deployment.env | cut -d'=' -f2)
          
          # Extract backend image tag (first line from multi-line tags output)
          BACKEND_TAG=$(echo "${{ needs.build-and-push-image.outputs.backend-tags }}" | head -n1)
          
          # Update deployment.env with new backend image, keep existing frontend
          cat > deployment.env << EOF
          # Personifi Deployment Configuration
          # Updated by GitHub Actions from backend build
          
          BACKEND_IMAGE=${BACKEND_TAG}
          FRONTEND_IMAGE=${CURRENT_FRONTEND_IMAGE}
          DEPLOYED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA=${{ github.sha }}
          DEPLOYMENT_VERSION=$(date +%s)
          EOF
          
          # Commit and push the changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add deployment.env
          git commit -m "🚀 Deploy backend ${{ github.sha:0:7 }}

          Backend: ${BACKEND_TAG}
          Frontend: ${CURRENT_FRONTEND_IMAGE} (unchanged)
          Triggered by: ${{ github.actor }}"
          git push
          
          echo "✅ GitOps deployment configuration updated"
          echo "Backend image: ${BACKEND_TAG}"

  comment-pr-unit:
    name: Comment Unit Test Results on PR
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request' && always()

    permissions:
      pull-requests: write

    steps:
      - name: Download unit test results
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results
          path: TestResults/Unit/
        continue-on-error: true

      - name: Comment PR with unit test results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find TRX files
            const testResultsDir = 'TestResults/Unit';
            let testSummary = '## Unit Test Results ⚡\n\n';

            // Check if unit tests passed or failed
            const unitTestResult = '${{ needs.unit-tests.result }}';

            if (unitTestResult === 'success') {
              testSummary += '✅ **Unit tests passed successfully!**\n\n';
            } else if (unitTestResult === 'failure') {
              testSummary += '❌ **Unit tests failed**\n\n';
            } else {
              testSummary += '⚠️ **Unit tests were cancelled or skipped**\n\n';
            }

            // Parse TRX files for detailed statistics
            let totalTests = 0;
            let passedTests = 0;
            let failedTests = 0;
            let skippedTests = 0;

            try {
              if (fs.existsSync(testResultsDir)) {
                const files = fs.readdirSync(testResultsDir, { recursive: true });
                const trxFiles = files.filter(file => file.toString().endsWith('.trx'));
                
                for (const trxFile of trxFiles) {
                  const trxPath = path.join(testResultsDir, trxFile);
                  const trxContent = fs.readFileSync(trxPath, 'utf8');
                  
                  // Parse TRX XML for test statistics
                  const totalMatch = trxContent.match(/total="(\d+)"/);
                  const passedMatch = trxContent.match(/passed="(\d+)"/);
                  const failedMatch = trxContent.match(/failed="(\d+)"/);
                  const skippedMatch = trxContent.match(/skipped="(\d+)"/);
                  
                  if (totalMatch) totalTests += parseInt(totalMatch[1]);
                  if (passedMatch) passedTests += parseInt(passedMatch[1]);
                  if (failedMatch) failedTests += parseInt(failedMatch[1]);
                  if (skippedMatch) skippedTests += parseInt(skippedMatch[1]);
                }

                if (totalTests > 0) {
                  testSummary += '### 📊 Test Statistics\n\n';
                  testSummary += `| Metric | Count |\n`;
                  testSummary += `|--------|-------|\n`;
                  testSummary += `| **Total Tests** | ${totalTests} |\n`;
                  testSummary += `| **✅ Passed** | ${passedTests} |\n`;
                  testSummary += `| **❌ Failed** | ${failedTests} |\n`;
                  testSummary += `| **⏭️ Skipped** | ${skippedTests} |\n`;
                  
                  const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : '0.0';
                  testSummary += `| **Success Rate** | ${successRate}% |\n\n`;
                  
                  if (unitTestResult === 'success') {
                    testSummary += '- All unit tests (controllers, services, middleware) completed without errors\n';
                    testSummary += '- Fast feedback loop maintained\n';
                  } else if (failedTests > 0) {
                    testSummary += '- Check the Actions tab for detailed error information\n';
                    testSummary += '- Focus on unit test failures for quick fixes\n';
                  }
                } else {
                  testSummary += '📊 No detailed test statistics available\n';
                }
              }
            } catch (error) {
              testSummary += '\n⚠️ Could not parse detailed test results.\n';
              console.error('Error parsing TRX files:', error);
            }

            testSummary += '\n---\n';
            testSummary += '*Unit test results updated automatically by CI/CD pipeline.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

  comment-pr-integration:
    name: Comment Integration Test Results on PR
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request' && always()

    permissions:
      pull-requests: write

    steps:
      - name: Download integration test results
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: TestResults/Integration/
        continue-on-error: true

      - name: Comment PR with integration test results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find TRX files
            const testResultsDir = 'TestResults/Integration';
            let testSummary = '## Integration Test Results 🔗\n\n';

            // Check if integration tests passed or failed
            const integrationTestResult = '${{ needs.integration-tests.result }}';

            if (integrationTestResult === 'success') {
              testSummary += '✅ **Integration tests passed successfully!**\n\n';
            } else if (integrationTestResult === 'failure') {
              testSummary += '❌ **Integration tests failed**\n\n';
            } else {
              testSummary += '⚠️ **Integration tests were cancelled or skipped**\n\n';
            }

            // Parse TRX files for detailed statistics
            let totalTests = 0;
            let passedTests = 0;
            let failedTests = 0;
            let skippedTests = 0;

            try {
              if (fs.existsSync(testResultsDir)) {
                const files = fs.readdirSync(testResultsDir, { recursive: true });
                const trxFiles = files.filter(file => file.toString().endsWith('.trx'));
                
                for (const trxFile of trxFiles) {
                  const trxPath = path.join(testResultsDir, trxFile);
                  const trxContent = fs.readFileSync(trxPath, 'utf8');
                  
                  // Parse TRX XML for test statistics
                  const totalMatch = trxContent.match(/total="(\d+)"/);
                  const passedMatch = trxContent.match(/passed="(\d+)"/);
                  const failedMatch = trxContent.match(/failed="(\d+)"/);
                  const skippedMatch = trxContent.match(/skipped="(\d+)"/);
                  
                  if (totalMatch) totalTests += parseInt(totalMatch[1]);
                  if (passedMatch) passedTests += parseInt(passedMatch[1]);
                  if (failedMatch) failedTests += parseInt(failedMatch[1]);
                  if (skippedMatch) skippedTests += parseInt(skippedMatch[1]);
                }

                if (totalTests > 0) {
                  testSummary += '### 📊 Test Statistics\n\n';
                  testSummary += `| Metric | Count |\n`;
                  testSummary += `|--------|-------|\n`;
                  testSummary += `| **Total Tests** | ${totalTests} |\n`;
                  testSummary += `| **✅ Passed** | ${passedTests} |\n`;
                  testSummary += `| **❌ Failed** | ${failedTests} |\n`;
                  testSummary += `| **⏭️ Skipped** | ${skippedTests} |\n`;
                  
                  const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : '0.0';
                  testSummary += `| **Success Rate** | ${successRate}% |\n\n`;
                  
                  if (integrationTestResult === 'success') {
                    testSummary += '- All API endpoints tested with full HTTP stack\n';
                    testSummary += '- Database operations verified\n';
                    testSummary += '- Authentication flows working correctly\n';
                  } else if (failedTests > 0) {
                    testSummary += '- This may indicate issues with API endpoints, database, or authentication\n';
                    testSummary += '- Check the Actions tab for detailed error information\n';
                  }
                } else {
                  testSummary += '📊 No detailed test statistics available\n';
                }
              }
            } catch (error) {
              testSummary += '\n⚠️ Could not parse detailed test results.\n';
              console.error('Error parsing TRX files:', error);
            }

            testSummary += '\n---\n';
            testSummary += '*Integration test results updated automatically by CI/CD pipeline.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });
