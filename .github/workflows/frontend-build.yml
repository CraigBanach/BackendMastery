name: Frontend Image Creation

on:
  pull_request:
    branches: ["main"]
    paths:
      - "personifi-app/**"
      - ".github/workflows/frontend-build.yml"
  push:
    branches: ["main"]
    paths:
      - "personifi-app/**"
      - ".github/workflows/frontend-build.yml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: craigbanach/personifi-app
  NODE_VERSION: "20"

jobs:
  # Lint and test job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./personifi-app

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./personifi-app/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Build application
        run: npm run build

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      frontend-tags: ${{ steps.meta.outputs.tags }}

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For main branch - latest + commit sha
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,format=short,enable={{is_default_branch}}

            # For releases
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # Always add latest for main branch
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=PersonifiApp
            org.opencontainers.image.description=Personal Finance Frontend Application
            org.opencontainers.image.vendor=Craig Banach
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:personifi-app"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  update-deployment-config:
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write

    steps:
      - name: Update GitOps deployment configuration
        run: |
          # Clone deployment repository
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/personifi-deployments.git
          cd personifi-deployments
          
          # Get current backend image from deployment.env
          CURRENT_BACKEND_IMAGE=$(grep "BACKEND_IMAGE=" deployment.env | cut -d'=' -f2)
          
          # Extract frontend image tag (first line from multi-line tags output)
          FRONTEND_TAG=$(echo "${{ needs.build-and-push-image.outputs.frontend-tags }}" | head -n1)
          
          # Update deployment.env with new frontend image, keep existing backend
          cat > deployment.env << EOF
          # Personifi Deployment Configuration
          # Updated by GitHub Actions from frontend build
          
          BACKEND_IMAGE=${CURRENT_BACKEND_IMAGE}
          FRONTEND_IMAGE=${FRONTEND_TAG}
          DEPLOYED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA=${{ github.sha }}
          DEPLOYMENT_VERSION=$(date +%s)
          EOF
          
          # Commit and push the changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add deployment.env
          git commit -m "🎨 Deploy frontend ${{ github.sha:0:7 }}

          Backend: ${CURRENT_BACKEND_IMAGE} (unchanged)
          Frontend: ${FRONTEND_TAG}
          Triggered by: ${{ github.actor }}"
          git push
          
          echo "✅ GitOps deployment configuration updated"
          echo "Frontend image: ${FRONTEND_TAG}"

  comment-pr-lint:
    name: Comment Lint Results on PR
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request' && always()

    permissions:
      pull-requests: write

    steps:
      - name: Comment PR with lint results
        uses: actions/github-script@v7
        with:
          script: |
            const lintResult = '${{ needs.lint-and-test.result }}';
            let summary = '## Frontend Build & Lint Results 🎨\n\n';

            if (lintResult === 'success') {
              summary += '✅ **Frontend build and lint checks passed successfully!**\n\n';
              summary += '- ESLint validation completed without errors\n';
              summary += '- Next.js build completed successfully\n';
              summary += '- All TypeScript types are valid\n';
              summary += '- Ready for deployment\n';
            } else if (lintResult === 'failure') {
              summary += '❌ **Frontend build or lint checks failed**\n\n';
              summary += '- Check the Actions tab for detailed error information\n';
              summary += '- Common issues to check:\n';
              summary += '  - ESLint rule violations\n';
              summary += '  - TypeScript compilation errors\n';
              summary += '  - Missing dependencies\n';
              summary += '  - Build optimization warnings\n';
            } else {
              summary += '⚠️ **Frontend build and lint checks were cancelled or skipped**\n\n';
            }

            summary += '\n---\n';
            summary += '*Frontend lint and build results updated automatically by CI/CD pipeline.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
